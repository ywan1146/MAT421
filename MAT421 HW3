#question 9
##############################################
import numpy as np
import matplotlib.pyplot as plt
def my_lagrange(x,y,X):
Y=0
for i in range(len(x)):
P=1
for j in range(len(x)):
if i != j:
Px=X-x[j]#Px is an array with 101 elements
#print(X)
Dx=x[i]-x[i]
#print(Dx)
P=P*Px/Dx
#print(f"X{X}:Y{Y}")
Y=y[i]*P+Y
return Y
#from scipy import interpolate
x=[0,1,2,3,4]
y=[2,1,3,5,1]
X=np.linspace(0,4,101)
#print(len(X))
plt.figure(figsize=(10,8))
plt.plot(X,my_lagrange(x,y,X),"b",label="interpolation")
plt.plot(x,y,"ro",label="data points")
plt.xlabel("X")
plt.ylabel("Y")
plt.title("Lagrange Interpolation of Data points")
plt.legend()
plt.show()

#question 10
##############################################
import numpy as np
import matplotlib.pyplot as plt
def divided_diff(x,y):
n=len(y)
coef=np.zeros([n,n])
coef[:,0]=y
for j in range(1,n):
for i in range(n-j
coefi]]=(coef[i+1][j-1]-coef[i][j-1])/(x[i+j]-x[i])
return coef
def newton_poly(coef,x_data,x):
n=len(x_data)-1
p=coef[n]
for k in range(1,n+1):
p=coef[n-k]+(x-x_data[n-k])*p
return p
x=[0,1,2,3,4]
y=[2,1,3,5,1]
#x=[-5,-1,0,2]
#y=[-2,6,1,3]
a_s=divided_diff(x,y)[0,:]
x_new=np.arange(0,5,0.1)
#x_new=np.arange(-5,2.1,0.1)
y_new=newton_poly(a_s,x,x_new)#np.array(x))
plt.figure(figsize=(12,8))
plt.plot(x,y,"ro",label="data")
plt.plot(x_new,y_new,"b",label="interpolation")
plt.xlabel("X")
plt.ylabel("Y")
plt.title("Newtonsdivided difference Interpolation of Data points")
plt.legend()
plt.show()
